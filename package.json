{
  "name": "honey-badger-testing",
  "version": "1.0.0",
  "description": "A collection of scripts to test the Honey Badger BFT integration in Parity",
  "main": "src/index.js",
  "scripts": {
    "postinstall": "npm-run-all repos-contracts-apply-current",
    "build-open-ethereum": "ts-node src/localnet/build-node-software.ts",
    "build-open-ethereum-debug": "export RUSTFLAGS='-C target-cpu=native' && cargo build --manifest-path ../diamond-node/Cargo.toml",
    "build-open-ethereum-release": "export RUSTFLAGS='-C target-cpu=native' && cargo build --manifest-path ../diamond-node/Cargo.toml --release",
    "build-open-ethereum-perf": "export RUSTFLAGS='-C target-cpu=native' && cargo build --manifest-path ../diamond-node/Cargo.toml --profile perf",
    "build-open-ethereum-all": "npm-run-all build-open-ethereum-debug build-open-ethereum-release build-open-ethereum-perf",
    "rpc": "cd testnet && ./run_rpc_local.sh",
    "ui": "cd testnet && ./run_staking_ui.sh",
    "ui-new": "cd ../dmd-ui && export REACT_APP_URL=http://38.242.206.143:8545 && npm run start",
    "tsc": "tsc",
    "lint": "npx eslint",
    "keepalive-wait": "node src/keepalive-wait.js",
    "keepalive-nowait": "node src/keepalive-nowait.js",
    "continuous": "npm run backup && ts-node src/runContinousTransactionsSender.ts",
    "pendingTransactions": "ts-node src/runShowPendingTransactions.ts",
    "heartbeat": "NODE_ENV=heartbeat ts-node src/runContinousTransactionsSender.ts",
    "t_onceASecond1": "NODE_ENV=onceASecond1 ts-node src/runContinousTransactionsSender.ts",
    "t_latency_5m_baseline10tx": "NODE_ENV=latency_5m_baseline10tx ts-node src/runContinousTransactionsSender.ts",
    "t_latency_5m_single_transactions": "NODE_ENV=latency_5m_single_transactions ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_single": "NODE_ENV=throughput_single ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p1": "NODE_ENV=throughput_multi1 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p2": "NODE_ENV=throughput_multi2 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p3": "NODE_ENV=throughput_multi3 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p4": "NODE_ENV=throughput_multi4 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p5": "NODE_ENV=throughput_multi5 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p6": "NODE_ENV=throughput_multi6 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p7": "NODE_ENV=throughput_multi7 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p8": "NODE_ENV=throughput_multi8 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p9": "NODE_ENV=throughput_multi9 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p10": "NODE_ENV=throughput_multi10 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p11": "NODE_ENV=throughput_multi11 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p12": "NODE_ENV=throughput_multi12 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p13": "NODE_ENV=throughput_multi13 ts-node src/runContinousTransactionsSender.ts",
    "t_throughput_p14": "NODE_ENV=throughput_multi14 ts-node src/runContinousTransactionsSender.ts",
    "logCurrentBlockNumber": "ts-node src/runWriteCurrentBlockNumber.ts",
    "feedAccounts": "ts-node src/runFeedAccount.ts 30",
    "analyseTransaction": "ts-node src/runAnalyseTransaction.ts",
    "backup": "ts-node src/runBackupOldOutput.ts",
    "performance-latency1": "npm-run-all backup logCurrentBlockNumber t_latency_5m_single_transactions --sequential logBlocksAsCsv backup",
    "performance-latency2": "npm-run-all backup logCurrentBlockNumber --parallel t_latency_5m_baseline10tx t_latency_5m_single_transactions --sequential logBlocksAsCsv backup",
    "performance-throughput1": "npm-run-all backup logCurrentBlockNumber t_throughput_single logBlocksAsCsv backup",
    "performance-throughput2": "npm-run-all backup logCurrentBlockNumber --parallel t_throughput_p1 t_throughput_p2 t_throughput_p3 t_throughput_p4 t_throughput_p5 t_throughput_p6 t_throughput_p7 --sequential logBlocksAsCsv backup",
    "logBlocksAsCsv": "ts-node src/runLogBlocksAsCsv.ts",
    "waitAMinute": "ts-node src/runWait.ts",
    "updateHbbftAbi": "mkdir -p src/hbbftAbi && rm -fr src/hbbftAbi && mkdir src/hbbftAbi && cp ../diamond-contracts-core/build/contracts/*.json src/hbbftAbi/",
    "runAllPerformanceTests": "npm-run-all performance-latency1 waitAMinute performance-latency2 waitAMinute performance-throughput1 waitAMinute waitAMinute performance-throughput2",
    "setup-testnet": "cd testnet && python3 setup_testnet.py 1",
    "test-hbbft-contract": "NODE_ENV=localhost ts-node src/runHbbftTests.ts",
    "start-testnode": "cd testNode && ./start_node.sh",
    "typechain": "typechain --target web3-v1 --out-dir src/abi/contracts 'src/abi/json/*.json'",
    "logEvents": "ts-node src/runLogAvailabilityEvents.ts",
    "getCurrentTestnetState": "ts-node src/regression/runGetCurrentTestnetState.ts",
    "use-testnet": "export NODE_ENV=localhost",
    "testnet-feed-pools": "ts-node src/runFeedPools.ts",
    "test": "export NODE_ENV=localhost && npm run build-open-ethereum && npm run testnet-fresh && npm run net-add-validator-each-epoch | tee testnet/nodes/addOneValidatorEachEpoch.log",
    "watchdog": "ts-node src/runWatchdog.ts",
    "repos-contracts-copy-abis": "mkdir -p src/abi/json/ && find ../diamond-contracts-core/artifacts/contracts/ -name '*.json' -exec cp {} src/abi/json/ \\; && rm src/abi/json/*.dbg.json",
    "repos-contracts-copy-flats": "mkdir -p src/abi/contracts-flat/ && cp -r ../diamond-contracts-core/flat/* src/abi/contracts-flat",
    "repos-contracts-compile": "cd ../diamond-contracts-core && npm run compile && npm run flat",
    "repos-contracts-apply-current": "npm-run-all repos-contracts-compile repos-contracts-copy-abis repos-contracts-copy-flats typechain",
    "net-stake-on-existing-pools": "ts-node src/runStakeOnExistingPools.ts",
    "net-unstake": "ts-node src/net/runUnstake.ts",
    "net-contracts-upgrade": "ts-node src/contracts/runUpgradeContracts.ts",
    "net-contracts-test": "ts-node src/contracts/verifySourceCode.ts",
    "net-print-contract-details": "ts-node src/contracts/printContractDetails.ts",
    "net-stake-on-validators": "ts-node src/net/runStakeOnValidators.ts",
    "net-set-registry-fee": "ts-node src/control/runSetRegistryFee.ts",
    "net-show-block-details": "ts-node src/net/showBlockDetails.ts",
    "net-show-transaction-details": "ts-node src/net/showTransactionDetails.ts",
    "net-csv-no-ack-validators": "ts-node src/analysis/runNoAcksScraper.ts",
    "net-print-peers-from-contract-infos": "ts-node src/net/printPeersFromContractInfos.ts",
    "net-csv-node-infos": "ts-node src/net/runCsvNodeInfos.ts",
    "net-csv-headers": "ts-node src/net/runCsvHeaders.ts",
    "net-csv-rng": "ts-node src/net/runCsvRng.ts",
    "net-send-dummy-txs": "ts-node src/runContinousTransactionsSender.ts",
    "net-spam-txs-parallel": "npm-run-all --parallel t_throughput_p1 t_throughput_p2 t_throughput_p3 t_throughput_p4 t_throughput_p5 t_throughput_p6 t_throughput_p7 t_throughput_p8 t_throughput_p9 t_throughput_p10 t_throughput_p11 t_throughput_p12 t_throughput_p13 t_throughput_p14",
    "net-add-validator-each-epoch": "ts-node src/net/runAddOneValidatorEachEpoch.ts",
    "net-add-validator-each-epoch-booted": "ts-node src/net/runAddOneValidatorEachEpoch.ts --boot",
    "net-register-names": "ts-node src/net/runRegisterNames.ts",
    "net-search-performance-plateau": "ts-node src/tests/runSearchPerformancePlateau.ts",
    "net-steady-state": "ts-node src/net/runTxsLimitFinder.ts",
    "net-print-state": "ts-node src/net/runPrintNetState.ts",
    "net-print-stake-events": "ts-node src/net/runPrintStakeEvents.ts",
    "db-start-local": "cd db && docker compose up",
    "db-grant-grafana-permissions": "ts-node src/db/runGrantGrafanaPermissions.ts",
    "db-update-ts-schema": "npx @databases/pg-schema-cli --database postgres://postgres:$DMD_DB_POSTGRES@127.0.0.1:5432/postgres --directory src/db/schema",
    "db-fill-from-network": "ts-node src/db/runFillDb.ts",
    "db-delete-tables": "ts-node src/db/delete-tables.ts",
    "localnet-blockscout-fresh": "cd testnet/blockscout-local && docker-compose down && docker-compose up",
    "localnet-create-mnemonic": "ts-node src/localnet/create-random-mnemonic.ts",
    "localnet-start-phonix-test": "ts-node src/localnet/runPhoenixTestNetwork.ts",
    "testnet-start-current": "ts-node src/runWatchdog.ts --boot",
    "testnet-watchdog": "ts-node src/runWatchdog.ts",
    "testnet-state-analysis": "ts-node testnet/control/runGetCurrentTestnetState.ts",
    "testnet-clear-validator-dbs": "ts-node src/localnet/runClearValidatorsDB.ts",
    "testnet-restore-validator-dbs": "ts-node src/localnet/runRestoreValidatorsDB.ts",
    "testnet-backup-validator-dbs": "ts-node src/localnet/runBackupValidatorDB.ts",
    "testnet-fresh-grow-each-epoch": "npm-run-all testnet-fresh net-add-validator-each-epoch-booted",
    "testnet-fresh": "export STAKING_TRANSITION_WINDOW_LENGTH=120 && export STAKING_EPOCH_DURATION=432 && export MINIMUM_BLOCK_TIME=1 && export MAXIMUM_BLOCK_TIME=240 && cd testnet && ./setup_testnet.py 1 27 && cd -",
    "testnet-fresh-duo": "export STAKING_TRANSITION_WINDOW_LENGTH=60 && export STAKING_EPOCH_DURATION=120 && export MINIMUM_BLOCK_TIME=1 && export MAXIMUM_BLOCK_TIME=30 && cd testnet && ./setup_testnet.py 2 2 && cd -",
    "testnet-fresh-regression": "export STAKING_TRANSITION_WINDOW_LENGTH=60 && export STAKING_EPOCH_DURATION=120 && export MINIMUM_BLOCK_TIME=1 && export MAXIMUM_BLOCK_TIME=30 && cd testnet && ./setup_testnet.py 6 6 && cd -",
    "testnet-fresh-grow-me": "export STAKING_TRANSITION_WINDOW_LENGTH=120 && export STAKING_EPOCH_DURATION=600 && export MINIMUM_BLOCK_TIME=10 && export MAXIMUM_BLOCK_TIME=30 && cd testnet && ./setup_testnet.py 1 10 && cd -",
    "testnet-fresh-no-epoch-switches": "export STAKING_TRANSITION_WINDOW_LENGTH=60 && export STAKING_EPOCH_DURATION=2629800 && export MINIMUM_BLOCK_TIME=1 && export MAXIMUM_BLOCK_TIME=60 && cd testnet && ./setup_testnet.py 4 4 && cd -",    
    "testnet-fresh-12hour": "export STAKING_TRANSITION_WINDOW_LENGTH=600 && export STAKING_EPOCH_DURATION=43200 && export MINIMUM_BLOCK_TIME=1 && export MAXIMUM_BLOCK_TIME=600 && cd testnet && ./setup_testnet.py 25 25 && cd -",
    "testnet-test-availability-handling-current": "ts-node src/regression/testAvailabilityHandling.ts",
    "testnet-test-availability-handling-fresh": "export STAKING_TRANSITION_WINDOW_LENGTH=90 && export STAKING_EPOCH_DURATION=120 && export MINIMUM_BLOCK_TIME=1 && export NETWORK_ID=666001 && cd testnet && ./setup_testnet.py 1 17 && cd - && export NODE_ENV=localhost && npm run testnet-test-availability-handling-current",
    "testnet-add-validator-each-epoch": "export NODE_ENV=localhost && npm run net-add-validator-each-epoch",
    "testnet-show-node-table": "ts-node src/remotenet/runCreateReservedPeersFiles.ts",
    "remotenet-create-peers-files": "ts-node src/remotenet/runCreateReservedPeersFiles.ts",
    "remotenet-full-clean": "ts-node src/remotenet/runFullClean.ts",
    "remotenet-deploy-from-localnet": "ts-node src/remotenet/runDeployFromLocalnet.ts",
    "remotenet-deploy-binaries": "ts-node src/remotenet/runDeployBinaries.ts",
    "remotenet-deploy-rpc": "ts-node src/remotenet/runDeployRpc.ts",
    "remotenet-deploy-patch": "ts-node src/remotenet/runDeployPatch.ts",
    "remotenet-deploy-complete": "npm-run-all remotenet-create-peers-files remotenet-deploy-from-localnet remotenet-deploy-binaries",
    "remotenet-start": "ts-node src/remotenet/runStartRemotenet.ts",
    "remotenet-start-all": "ts-node src/remotenet/runStartRemotenet.ts --all",
    "remotenet-start-unavailable": "ts-node src/remotenet/runStartRemotenet.ts --onlyunavailable",
    "remotenet-start-standby-nodes": "ts-node src/remotenet/runStartRemotenet.ts --all --skipcurrent",
    "remotenet-stop": "ts-node src/remotenet/runStopRemotenet.ts ",
    "remotenet-stop-all": "ts-node src/remotenet/runStopRemotenet.ts --all",
    "remotenet-stop-unavailable": "ts-node src/remotenet/runStopRemotenet.ts --onlyunavailable",
    "remotenet-stop-standby-nodes": "ts-node src/remotenet/runStopRemotenet.ts --all --skipcurrent",
    "remotenet-restart-unavailable": "npm-run-all remotenet-stop-unavailable remotenet-start-unavailable",
    "remotenet-restart-standbys": "npm-run-all remotenet-stop-standby-nodes remotenet-start-standby-nodes",
    "remotenet-restart": "ts-node src/remotenet/runRestartRemotenet.ts",
    "remotenet-restart-all": "npm-run-all remotenet-stop-all remotenet-start-all",
    "remotenet-delete-messages": "ts-node src/remotenet/runDeleteMessages.ts",
    "remotenet-delete-chain-data": "ts-node src/remotenet/runDeleteChainData.ts",
    "remotenet-delete-logs": "ts-node src/remotenet/runDeleteLogs.ts",
    "remotenet-cycle-logs": "ts-node src/remotenet/runCycleLogs.ts",
    "remotenet-cycle-messages": "ts-node src/remotenet/runCycleMessages.ts",
    "remotenet-download-messages": "ts-node src/remotenet/runDownloadMesssages.ts",
    "remotenet-hot-binary-update": "ts-node src/remotenet/runDeployBinariesHot.ts",
    "remotenet-binary-update-from-git-async": "ts-node src/remotenet/runBinaryUpdateFromGitAsync.ts",
    "remotenet-binary-update-from-git": "ts-node src/remotenet/runBinaryUpdateFromGit.ts",
    "remotenet-binary-update-standby-nodes": "ts-node src/remotenet/runDeployBinariesHot.ts --all --skipcurrent",
    "remotenet-print-software-versions": "ts-node src/remotenet/runPrintSoftwareVersions.ts",
    "remotenet-print-logfile-size": "ts-node src/remotenet/runPrintLogfileSize.ts",
    "remotenet-download-specific-log-section": "ts-node src/remotenet/runDownloadSpecificLogSection.ts",
    "remotenet-download-logs": "ts-node src/remotenet/runDownloadLogs.ts",
    "remotenet-delete-log-backups": "ts-node src/remotenet/runDeleteLogBackups.ts",
    "remotenet-git-pull-hot": "ts-node src/remotenet/runPullGitRepoHot.ts",
    "remotenet-git-pull": "ts-node src/remotenet/runPullGitRepo.ts",
    "remotenet-git-pull-oe": "ts-node src/remotenet/runPullGitOE.ts",
    "remotenet-git-pull-node-and-build": "ts-node src/remotenet/runGitPullAndBuildNode.ts",
    "remotenet-git-reset": "ts-node src/remotenet/runGitReset.ts",
    "remotenet-git-clone-network": "ts-node src/remotenet/runGitCloneNetwork.ts",
    "remotenet-git-delete-node": "ts-node src/remotenet/runGitDeleteNode.ts",
    "remotenet-git-setup-build-from-source": "ts-node src/remotenet/runGitSetupBuildFromSource.ts",
    "remotenet-search-logs": "ts-node src/remotenet/runSearchTextInLogs.ts",
    "remotenet-execute": "ts-node src/remotenet/runExecuteCmd.ts",
    "remotenet-csv-version": "ts-node src/remotenet/runCsvVersion.ts",
    "remotenet-csv-sys-stats": "ts-node src/remotenet/runCsvSysStats.ts",
    "remotenet-manipulate-toml": "ts-node src/remotenet/runManipulateToml.ts",
    "remotenet-rescue-nodes-info": "ts-node src/remotenet/runRescueNodesInfo.ts",
    "remotenet-set-log-level": "",
    "test-performance": "ts-node src/tests/runPerformanceTests",
    "test-insufficient-balance": "ts-node src/regression/runInsufficiantBalanceSpam.ts",
    "analyse-messages-pending-block": "ts-node src/runAnalyseMessagesPendingBlock.ts",
    "tool-fund": "ts-node src/tools/runFundAccount.ts",
    "blockscout": "ts-node src/contracts/blockscout.ts"
  },
  "repository": {
    "type": "git",
    "url": "git@code.lab10.io:graz/04-artis/honey-badger-testing.git"
  },
  "keywords": [
    "bootstrap",
    "linting",
    "testing"
  ],
  "authors": [
    "thomas.haller@lab10.coop",
    "dfo@lab10.coop"
  ],
  "license": "GPL-3.0-or-later",
  "dependencies": {
    "@databases/pg": "^5.4.1",
    "@databases/pg-schema-cli": "^4.3.1",
    "@databases/pg-typed": "^4.4.1",
    "@types/async": "^3.2.15",
    "@types/deep-equal": "^1.0.1",
    "@types/prompt": "^1.1.4",
    "@types/underscore": "^1.11.4",
    "async": "^3.2.4",
    "axios": "^1.2.3",
    "bignumber.js": "^9.1.0",
    "bip39": "^3.0.4",
    "config": "^3.3.8",
    "csv-writer": "^1.6.0",
    "deep-equal": "^2.0.5",
    "ethereumjs-wallet": "^1.0.2",
    "ethers-multisend": "^2.3.0",
    "prompt": "^1.3.0",
    "toml": "^3.0.0",
    "ts-command-line-args": "^2.3.1",
    "underscore": "^1.13.6",
    "web3": "^1.8.0",
    "web3-core": "^1.8.0",
    "websocket": "^1.0.34"
  },
  "devDependencies": {
    "@typechain/web3-v1": "^6.0.2",
    "@types/request": "^2.48.8",
    "mocha": "^10.1.0",
    "npm-run-all": "^4.1.2",
    "ts-node": "^10.9.1",
    "typechain": "^8.1.0",
    "typescript": "^4.8.4"
  }
}
